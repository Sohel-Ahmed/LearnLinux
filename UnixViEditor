Unix - The vi Editor Tutorial
-----------------------------------------
There are many ways to edit files in Unix. Editing files using the screen-oriented text editor vi is one of the best ways. This editor enables you to edit lines in context with other lines in the file.

An improved version of the vi editor which is called the VIM has also been made available now. Here, VIM stands for Vi IMproved

vi is generally considered the de facto standard in Unix editors because −

It's usually available on all the flavors of Unix system.

Its implementations are very similar across the board.

It requires very few resources.

It is more user-friendly than other editors such as the ed or the ex.

You can use the vi editor to edit an existing file or to create a new file from scratch. You can also use this editor to just read a text file.

--------------------------------
Starting the vi Editor
The following table lists out the basic commands to use the vi editor −

S.No.	Command & Description
1	
vi filename

Creates a new file if it already does not exist, otherwise opens an existing file.

2	
vi -R filename

Opens an existing file in the read-only mode.

3	
view filename

Opens an existing file in the read-only mode.
---------------------------------------------
Operation Modes
While working with the vi editor, we usually come across the following two modes −

Command mode − This mode enables you to perform administrative tasks such as saving the files, executing the commands, moving the cursor, cutting (yanking) and pasting the lines or words, as well as finding and replacing. In this mode, whatever you type is interpreted as a command.

Insert mode − This mode enables you to insert text into the file. Everything that's typed in this mode is interpreted as input and placed in the file.

vi always starts in the command mode. To enter text, you must be in the insert mode for which simply type i. To come out of the insert mode, press the Esc key, which will take you back to the command mode.

--------------------------------------
Getting Out of vi
The command to quit out of vi is :q. Once in the command mode, type colon, and 'q', followed by return. If your file has been modified in any way, the editor will warn you of this, and not let you quit. To ignore this message, the command to quit out of vi without saving is :q!. This lets you exit vi without saving any of the changes.

The command to save the contents of the editor is :w. You can combine the above command with the quit command, or use :wq and return.

The easiest way to save your changes and exit vi is with the ZZ command. When you are in the command mode, type ZZ. The ZZ command works the same way as the :wq command.

If you want to specify/state any particular name for the file, you can do so by specifying it after the :w. For example, if you wanted to save the file you were working on as another filename called filename2, you would type :w filename2 and return.
----------------------------------------

Moving within a File

S.No.	Command & Description
1	
k

Moves the cursor up one line

2	
j

Moves the cursor down one line

3	
h

Moves the cursor to the left one character position

4	
l

Moves the cursor to the right one character position
------------------------------------------
Control Commands

Editing Files

S.No.	Command & Description
1	
i

Inserts text before the current cursor location

2	
I

Inserts text at the beginning of the current line

3	
a

Inserts text after the current cursor location

4	
A

Inserts text at the end of the current line

5	
o

Creates a new line for text entry below the cursor location

6	
O

Creates a new line for text entry above the cursor location

---------------------------------------------
Deleting Characters

S.No.	Command & Description
1	
x

Deletes the character under the cursor location

2	
X

Deletes the character before the cursor location

3	
dw

Deletes from the current cursor location to the next word

4	
d^

Deletes from the current cursor position to the beginning of the line

5	
d$

Deletes from the current cursor position to the end of the line

6	
D

Deletes from the cursor position to the end of the current line

7	
dd

Deletes the line the cursor is on

-----------------------------------------

Change Commands

You also have the capability to change characters, words, or lines in vi without deleting them. Here are the relevant commands −

S.No.	Command & Description
1	
cc

Removes the contents of the line, leaving you in insert mode.

2	
cw

Changes the word the cursor is on from the cursor to the lowercase w end of the word.

3	
r

Replaces the character under the cursor. vi returns to the command mode after the replacement is entered.

4	
R

Overwrites multiple characters beginning with the character currently under the cursor. You must use Esc to stop the overwriting.

5	
s

Replaces the current character with the character you type. Afterward, you are left in the insert mode.

6	
S

Deletes the line the cursor is on and replaces it with the new text. After the new text is entered, vi remains in the insert mode.

--------------------------------------------
Copy and Paste Commands
You can copy lines or words from one place and then you can paste them at another place using the following commands −

S.No.	Command & Description
1	
yy

Copies the current line.

2	
yw

Copies the current word from the character the lowercase w cursor is on, until the end of the word.

3	
p

Puts the copied text after the cursor.

4	
P

Puts the yanked text before the cursor.
--------------------------------------
Advanced Commands

Word and Character Searching
The vi editor has two kinds of searches: string and character. For a string search, the / and ? commands are used. When you start these commands, the command just typed will be shown on the last line of the screen, where you type the particular string to look for.

These two commands differ only in the direction where the search takes place −

The / command searches forwards (downwards) in the file.

The ? command searches backwards (upwards) in the file.

The n and N commands repeat the previous search command in the same or the opposite direction, respectively. Some characters have special meanings. These characters must be preceded by a backslash (\) to be included as part of the search expression.

S.No.	Character &Description
1	
^

Searches at the beginning of the line (Use at the beginning of a search expression).

2	
.

Matches a single character.

3	
*

Matches zero or more of the previous character.

4	
$

End of the line (Use at the end of the search expression).

5	
[

Starts a set of matching or non-matching expressions.

6	
<

This is put in an expression escaped with the backslash to find the ending or the beginning of a word.

7	
>

This helps see the '<' character description above.
-----------------------

Set Commands
You can change the look and feel of your vi screen using the following :set commands. Once you are in the command mode, type :set followed by any of the following commands.
--------------------------

Running Commands
The vi has the capability to run commands from within the editor. To run a command, you only need to go to the command mode and type :! command.

For example, if you want to check whether a file exists before you try to save your file with that filename, you can type :! ls and you will see the output of ls on the screen.

---------------------------------------

Replacing Text
:s/search/replace/g
The g stands for globally. The result of this command is that all occurrences on the cursor's line are changed.

